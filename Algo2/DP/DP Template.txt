A) 定义状态含义
B）定义转移方程
C）确定Base Case


动态规划之⼦序列问题解题模板
⼀、两种思路
1、第⼀种思路模板是⼀个⼀维的 dp 数组：
int n = array.length;
int[] dp = new int[n];
for (int i = 1; i < n; i++) {
	for (int j = 0; j < i; j++) {
		dp[i] = 最值(dp[i], dp[j] + ...)
		......
	}
}
举个我们写过的例⼦「最⻓递增⼦序列」，在这个思路中 dp 数组的定义
是：在⼦数组 array[0..i] 中，我们要求的⼦序列（最⻓递增⼦序列）的⻓度是 dp[i]

2、第⼆种思路模板是⼀个⼆维的 dp 数组：
int n = arr.length;
int[][] dp = new dp[n][n];
for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		if (arr[i] == arr[j])
			dp[i][j] = dp[i][j] + ...	
		else
			dp[i][j] = 最值(...)
	}
}
这种思路运⽤相对更多⼀些，尤其是涉及两个字符串/数组的⼦序列，⽐如
前⽂讲的「最⻓公共⼦序列」。本思路中 dp 数组含义⼜分为「只涉及⼀个
字符串」和「涉及两个字符串」两种情况。